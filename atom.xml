<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https:// fairyscript.github.io</id>
    <title>千木岛</title>
    <updated>2020-07-13T06:51:41.272Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https:// fairyscript.github.io"/>
    <link rel="self" href="https:// fairyscript.github.io/atom.xml"/>
    <subtitle>懒人 混沌</subtitle>
    <logo>https:// fairyscript.github.io/images/avatar.png</logo>
    <icon>https:// fairyscript.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 千木岛</rights>
    <entry>
        <title type="html"><![CDATA[博客迁移到Gridea]]></title>
        <id>https:// fairyscript.github.io/post/bo-ke-qian-yi-dao-gridea/</id>
        <link href="https:// fairyscript.github.io/post/bo-ke-qian-yi-dao-gridea/">
        </link>
        <updated>2020-07-13T06:33:14.000Z</updated>
        <content type="html"><![CDATA[<p>Hexo很好,但是我不太懂它的模板语法,而且<strong>我懒</strong>,所以经过五分钟的调研我选择了<a href="https://github.com/getgridea/gridea">Gridea</a>作为博客的框架,然后从里面找了个顺眼的主题</p>
<p>Gridea的快捷键还不是很到位,也不支持<code>Hot Reload</code>,总的来说是能用,但是不算好用的,编辑器本身性能一般,不过我也不太介意,好看还是很好看的,重点是它的自动部署功能,不过我暂时没看到支持ssh,希望支持,否则就不太行了</p>
<p>自定义主题还是算了,有心无力,这一年仍然是饱尝无力感的一年,希望大家平安.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[黑苹果安装经验谈]]></title>
        <id>https:// fairyscript.github.io/post/黑苹果安装不完全指北/</id>
        <link href="https:// fairyscript.github.io/post/黑苹果安装不完全指北/">
        </link>
        <updated>2018-12-03T13:11:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="写在开头">写在开头</h2>
<p>​	Justin He大佬写的<a href="https://catty-house.blogspot.com/2018/10/hackintosh.html">[Hackintosh]如何正确的黑苹果[原创]</a></p>
<p>​	本来打算写一篇安装黑苹果的教程，可网络上优质的教程已经很多了，重复造轮子并没有什么意义。所以我想谈一谈从16年接触黑苹果到现在，我安装黑苹果并排除错误的一些心得。</p>
<p>​</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[通过NoVpaJpeg.kext解决 macOS Mojave(10.14)下预览jpg格式崩溃]]></title>
        <id>https:// fairyscript.github.io/post/通过NoVpaJpeg.kext解决 macOS Mojave(10.14)下预览jpg格式崩溃/</id>
        <link href="https:// fairyscript.github.io/post/通过NoVpaJpeg.kext解决 macOS Mojave(10.14)下预览jpg格式崩溃/">
        </link>
        <updated>2018-11-26T11:02:17.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2018/12/02/5c03976c6e5e0.png" alt="56493506_p0.png" loading="lazy"></figure>
<p>​	黑苹果升级到Mojave(10.14)后，遇到了通过预览打开jpg格式的图片时，预览会崩溃/卡转圈的情况，经过一番摸索，发现原因是预览调用了集显来解码JPG格式，而我因为有独显并没有打开集显。</p>
<p>​	除了通过修改为没有集显的机型SMBIOS 或者开启机器的集显，还有一种方法是在Clover中添加NoVPAJpeg.kext驱动来禁用集显解码。</p>
<p>​	原帖和Github放在了文章下方。</p>
<p>​	实测RX580工作正常。</p>
<p>更多……：</p>
<ul>
<li><a href="https://www.insanelymac.com/forum/topic/334881-how-to-fix-quick-look-and-preview-issues-in-mojave/?page=8">[HOW TO] Fix Quick Look and Preview issues in Mojave</a></li>
<li><a href="https://github.com/vulgo/NoVPAJpeg">NoVPAJpeg</a></li>
<li>题图：id=56493506</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[黑苹果fix USB端口（适用于10.14.1)]]></title>
        <id>https:// fairyscript.github.io/post/[todo]黑苹果fix-USB端口（适用于10-14-1/</id>
        <link href="https:// fairyscript.github.io/post/[todo]黑苹果fix-USB端口（适用于10-14-1/">
        </link>
        <updated>2018-11-17T13:39:54.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>本文所述内容来源于 https://www.insanelymac.com/forum/topic/335018-intel-fb-patcher-v165/</p>
</blockquote>
<p>自macOS版本来到10.14.1之后，过去常用的通过USBInjectall.kext 来破解系统USB端口数来完成后续修补的办法已经部分失效，本文即是为了在新版本系统中修补USB端口而作，其中核心内容译自开头链接</p>
<p>所需工具：</p>
<ul>
<li>macOS（如果有低于10.14.1的系统，可以直接进行修补而不需要重复下面的步骤）</li>
<li>FB-Patcher （https://www.insanelymac.com/forum/topic/335018-intel-fb-patcher-v165/）</li>
<li>USBInjectall.kext （https://github.com/RehabMan/OS-X-USB-Inject-All）</li>
<li>Clover （文本编辑或者Clover Configurator）</li>
<li>一个可以使用的USB3.0设备</li>
</ul>
<h3 id="步骤1">步骤1</h3>
<p>在Clover（/Clover/kexts/Other）中添加USBInjectall.kext，为了使其工作，在Clover-Acpi-DSDT中添加三个patch：</p>
<ul>
<li>Rename XHC1 -&gt; XHC</li>
<li>Rename EHC1 -&gt; EH01</li>
<li>Rename EHC2 -&gt; EH02</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2018/12/06/5c0830114dc9d.png" alt="" loading="lazy"></figure>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>本文所述内容来源于 https://www.insanelymac.com/forum/topic/335018-intel-fb-patcher-v165/</p>
</blockquote>
<p>自macOS版本来到10.14.1之后，过去常用的通过USBInjectall.kext 来破解系统USB端口数来完成后续修补的办法已经部分失效，本文即是为了在新版本系统中修补USB端口而作，其中核心内容译自开头链接</p>
<p>所需工具：</p>
<ul>
<li>macOS（如果有低于10.14.1的系统，可以直接进行修补而不需要重复下面的步骤）</li>
<li>FB-Patcher （https://www.insanelymac.com/forum/topic/335018-intel-fb-patcher-v165/）</li>
<li>USBInjectall.kext （https://github.com/RehabMan/OS-X-USB-Inject-All）</li>
<li>Clover （文本编辑或者Clover Configurator）</li>
<li>一个可以使用的USB3.0设备</li>
</ul>
<h3 id="步骤1">步骤1</h3>
<p>在Clover（/Clover/kexts/Other）中添加USBInjectall.kext，为了使其工作，在Clover-Acpi-DSDT中添加三个patch：</p>
<ul>
<li>Rename XHC1 -&gt; XHC</li>
<li>Rename EHC1 -&gt; EH01</li>
<li>Rename EHC2 -&gt; EH02</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2018/12/06/5c0830114dc9d.png" alt="" loading="lazy"></figure>
<!-- more -->
<h3 id="步骤2">步骤2</h3>
<p>在Clover-boot-customflag中添加<code>-uia_exclude_ss</code>（屏蔽USB3.0控制器），重启电脑。</p>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2018/12/06/5c083081e85b2.png" alt="" loading="lazy"></figure>
<p>此时你的电脑应该只有USB2.0控制器在工作。</p>
<h3 id="步骤3">步骤3</h3>
<p>启动FB-Patcher，选择General-USB。</p>
<figure data-type="image" tabindex="3"><img src="https://i.loli.net/2018/12/02/5c039f9f5c729.png" alt="" loading="lazy"></figure>
<p>列表中绿色的项即是可以（正在）使用的USB2.0端口。此时你需要把电脑上<strong>每一个</strong>USB接口都插一遍。最后显示的部分就是你得电脑上所有可用的USB2.0端口。请<strong>特别留意</strong>你电脑的<strong>键盘/鼠标</strong>所对应的hs端口编号（比如我的是<code>HS07</code>与<code>HS08</code>，稍后会用到。将所有没有使用的端口选中，点击左下方的删除，然后导出成USBports.kext保存，USB2.0部分完成。</p>
<h3 id="步骤4">步骤4</h3>
<p>再次打开Clover，编辑bootflag将<code>-uia_exclude_ss</code>替换为<code>-uia_exclude_hs</code>;添加<code>uia_include=&lt;font color=&quot;blue&quot;&gt;x&lt;/font&gt;</code>。此处的x为刚刚获取的键盘鼠标端口（意为排除对键盘鼠标端口的屏蔽），重启电脑。重复步骤3，记录下所有可工作的SS端口</p>
<p>注：一个USB3.0物理接口同时对应着USB2.0和USB3.0两个port，如果一个USB3.0接口只开启了SS port的话，它将不能识别USB2.0的设备，而USB2.0物理接口只对应一个hs port。</p>
<p>USB Connector 属性：</p>
<ul>
<li>0 为USB2.0 (480Mbps)；</li>
<li>3 为USB3.0 (5.0Gbps)；</li>
<li>255 为内建接口</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Clover DSDT 笔记]]></title>
        <id>https:// fairyscript.github.io/post/Clover-DSDT-笔记/</id>
        <link href="https:// fairyscript.github.io/post/Clover-DSDT-笔记/">
        </link>
        <updated>2018-10-30T12:16:12.000Z</updated>
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=30148963&auto=1&height=66"></iframe>
<p>​	本文是我在研究黑苹果DSDT期间所做的技术笔记，可读性会很差，建议善用搜索功能。</p>
<p>​	Clover修正DSDT的方式主要有两种：Patched 与 hotpatch。hotpatch主要是对原有的属性进行修正，而patched相当于为电脑添加了新的属性。故两者不能混淆。</p>
<p>​	Clover对DSDT热修补(hotpatch)的大致思路是将现有的需要修正的DSDT进行「重命名」，然后制作一个自定的DSDT文件（.aml)。将系统原生的DSDT访问指向自定的文件，然后就可以做到自定义指定DSDT的行为，此处举例：</p>
<pre><code>Comment: Rename _DSM to XDSM
Find: &lt;5f44534d&gt;
Replace: &lt;5844534d&gt;
</code></pre>
<p>注：「_DSM」转为Hex写作&lt;5f44534d&gt;</p>
<p>将系统原生的 _DSM 访问重定向至 XDSM，配合/clover/acpi/hotpatch下的.aml文件就可以拦截处理指定的DSDT。</p>
<p>未完待续……</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在hexo页面插入网易云播放器]]></title>
        <id>https:// fairyscript.github.io/post/在hexo页面插入网易云播放器/</id>
        <link href="https:// fairyscript.github.io/post/在hexo页面插入网易云播放器/">
        </link>
        <updated>2018-08-23T00:49:33.000Z</updated>
        <summary type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fuloi2o51hj318g0ix1ky.jpg" alt="70217074_p0" loading="lazy"></figure>
<p>最近终于在百(shou)忙(lie)之余想起来还有个博客的事，最近几个月除了把博客搬迁到了gitpage就完全没有理睬这玩意，既然今天想起来了就干脆把之前魔改留下的坑稍微填一下……</p>
<p>为什么会有这篇文章呢，为了让博客看着稍微正常点，我找了关于如何在Md页面中插入HTML的教程，最后发现是原生支持的……那么问题就变成了要在页面上插入些什么东西才好，思前想后果然还是王道征途，音乐控件吧</p>
<p>那么就是惯例的Google，找到了如下的代码：</p>
<pre><code class="language-html">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;320&quot; height=&quot;330&quot; src=&quot;https://music.163.com/outchain/player?type=0&amp;amp;id=24972133&amp;amp;auto=0&amp;amp;height=430&quot;&gt;&lt;/iframe&gt;
</code></pre>
<p>将这行代码直接放在需要的地方就可以实现如下效果的播放器：</p>
]]></summary>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fuloi2o51hj318g0ix1ky.jpg" alt="70217074_p0" loading="lazy"></figure>
<p>最近终于在百(shou)忙(lie)之余想起来还有个博客的事，最近几个月除了把博客搬迁到了gitpage就完全没有理睬这玩意，既然今天想起来了就干脆把之前魔改留下的坑稍微填一下……</p>
<p>为什么会有这篇文章呢，为了让博客看着稍微正常点，我找了关于如何在Md页面中插入HTML的教程，最后发现是原生支持的……那么问题就变成了要在页面上插入些什么东西才好，思前想后果然还是王道征途，音乐控件吧</p>
<p>那么就是惯例的Google，找到了如下的代码：</p>
<pre><code class="language-html">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;320&quot; height=&quot;330&quot; src=&quot;https://music.163.com/outchain/player?type=0&amp;amp;id=24972133&amp;amp;auto=0&amp;amp;height=430&quot;&gt;&lt;/iframe&gt;
</code></pre>
<p>将这行代码直接放在需要的地方就可以实现如下效果的播放器：</p>
<!-- more -->
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="320" height="330" src="https://music.163.com/outchain/player?type=0&amp;id=24972133&amp;auto=0&amp;height=430"></iframe>
<p>&lt;iframe&gt;控件的参数可以从<a href="http://www.w3school.com.cn/tags/tag_iframe.asp">这里</a>看到，可以借助参数来调整控件的外观。不过最重要的还是src部分的参数，将sec部分的‘type’和‘id’部分替换成自己的就可以了<br>
其中：</p>
<ul>
<li>type为0的时候对应的是歌单的id；</li>
<li>type为1的时候对应的是专辑的id；</li>
<li>type为2的时候对应的是单曲的id</li>
</ul>
<p>网易云自带的外链设置：<code>https://music.163.com/#/outchain/_type/_id/m/use/html</code>,将_type和_id改为需要的参数即可。</p>
<p><strong>2018.9.4更新</strong></p>
<p>最近将博客迁移到gitpages后发现此前的播放器不能正常显示，Google后发现是gitpage强制开启了https，而我之前的播放器src用了http……修改后解决</p>
<p><a href="http://saili.science/2017/05/30/music/">参考链接</a></p>
<hr>
<p>题图：Pixiv_PID:70217074</p>
<p>#EOF</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Play Store更新APP卡在“正在下载”的解决方法]]></title>
        <id>https:// fairyscript.github.io/post/Play Store更新APP卡在“正在下载”的解决方法/</id>
        <link href="https:// fairyscript.github.io/post/Play Store更新APP卡在“正在下载”的解决方法/">
        </link>
        <updated>2018-08-22T21:01:22.000Z</updated>
        <content type="html"><![CDATA[<p>最近几个月遇到了Play Store更新/下载应用时长时间卡在“正在下载…”的情况，然后过了几分钟之后突然开始下载的情况。一开始以为是网络的问题，但是反复检查没有头绪，于是搜索了一下，发现这个现象从去年开始就有相关的资料了（有理由怀疑是Google在搞什么动作）</p>
<p>解决方法也很简单，强行退出Play Store之后，清空Play Store的数据，重新打开就恢复了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nginx从入门到入土#1——配置文件初探]]></title>
        <id>https:// fairyscript.github.io/post/Nginx从入门到入土#1——配置文件初探/</id>
        <link href="https:// fairyscript.github.io/post/Nginx从入门到入土#1——配置文件初探/">
        </link>
        <updated>2018-04-13T11:06:22.000Z</updated>
        <summary type="html"><![CDATA[<p>本文意在简要说明Nginx配置文件以尽快上手，诸多进阶配置项不在本文的介绍范围内，请自行Google 😃</p>
<h3 id="nginx-文件树">Nginx 文件树</h3>
<p>Nginx的配置文件主要分为两类——Nginx自身的配置（即/etc/nginx/nginx.conf）和vHost配置文件（/etc/nginx/sites-available内文件）</p>
<p><img src="https://i.loli.net/2018/04/13/5ad0932aba39d.png" alt="" loading="lazy"><br>
（图为/etc/nginx文件夹一览）</p>
]]></summary>
        <content type="html"><![CDATA[<p>本文意在简要说明Nginx配置文件以尽快上手，诸多进阶配置项不在本文的介绍范围内，请自行Google 😃</p>
<h3 id="nginx-文件树">Nginx 文件树</h3>
<p>Nginx的配置文件主要分为两类——Nginx自身的配置（即/etc/nginx/nginx.conf）和vHost配置文件（/etc/nginx/sites-available内文件）</p>
<p><img src="https://i.loli.net/2018/04/13/5ad0932aba39d.png" alt="" loading="lazy"><br>
（图为/etc/nginx文件夹一览）</p>
<!-- more -->
<p>关于Nginx.conf文件，一般情况下不需要调整就可以正常工作，所以本文暂不展开讲解。但是值得注意的是，决定使用哪个vHost配置文件的相关内容位于Nginx.conf文件内：</p>
<pre><code>./nginx.conf
##
# Virtual Host Configs
##

include /etc/nginx/conf.d/*.conf;
include /etc/nginx/sites-enabled/*;
</code></pre>
<p>可以通过更改include字段来选择启用的vHost配置文件</p>
<h3 id="vhost配置">vHost配置</h3>
<p>由上例可知，实际中Nginx使用的是./sites-enabled/下的配置文件，然而一般情况下，我们选择将配置文件放到./sites-available/文件夹下，然后将要应用的配置文件软链接到sites-enabled文件夹下来使用。</p>
<p>如果你是通过apt或yum安装的Nginx，./sites-available/文件夹下应该会有一个default配置（也有可能同时存在它的备份），这就是nginx的默认配置文件。如果只是简单的端口转发/同时运行多个站点，只要在default的基础上进行修改即可。</p>
<p>以下是一个default文件的例子：</p>
<pre><code>server {
	listen 80;
	server_name localhost;
	root /var/www;
	index index.html index.htm;
	access_log  /var/log/nginx/access.log;
    error_log  /var/log/nginx/error.log;
	location / {
		return 301 https://$host$request_uri;
	}
}
</code></pre>
<p>其中：</p>
<ul>
<li>server{}代表了一个服务端，理论上每个不同的服务对应着一个server；</li>
<li>listen指你要监听的端口；</li>
<li>server_name 指响应的域名
<ul>
<li>详见 https://www.jianshu.com/p/2d6f16a32b37</li>
</ul>
</li>
<li>root 指网站的根目录</li>
<li>index指你网站的起始页面</li>
<li>location{}是该服务所响应的路径（即你的域名/IP后面的部分）</li>
</ul>
<p>下面我们详细说明一下location</p>
<pre><code>location /blog {
    stub_status on;
    access_log off;
    root /var/www;
    index index.html;
    }
</code></pre>
<p>location后面跟的“/”就是其响应的路径，其中“/”指的是响应所有路径。即形如“yourdomain.name/*** ”的URL都会被响应。如果location后面跟的是“/blog”，那么形如 “ yourdomain.name/blog ”的URL就会被响应。</p>
<p>是的，同一个server可以有多个location。<br>
同时在location内，server中的一些数据可以被覆盖，比如 root。</p>
<hr>
<p>修改日志：</p>
<p>2018-04-16：稍作修改；</p>
<p>2018-04-13：初版；</p>
<p>#EOF</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[黑苹果升级10.13.4——显卡篇]]></title>
        <id>https:// fairyscript.github.io/post/黑苹果升级10-13-4——显卡篇/</id>
        <link href="https:// fairyscript.github.io/post/黑苹果升级10-13-4——显卡篇/">
        </link>
        <updated>2018-03-31T03:53:12.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2018/04/13/5ad080a90ad84.jpg" alt="" loading="lazy"></figure>
<p>###2018.8.23更新：<br>
显卡驱动换为WhateverGreen，在错觉程度的水平上提升了性能表现……</p>
<hr>
<p>今日apple推送了macOS 10.13.4 新增了对eGPU的支持，实测在配合 NvidiaGraphicsFixup 时，可以显著提升MacOS的图形性能。</p>
<p>需要将 NvidiaGraphicsFixup 升级至1.2.5版本，WebDriver升级到387.10.10.10.30.103（即13.4最新版驱动）</p>
<p>升级过程应该不用我多讲了。。。大家一试便知</p>
<p>·附上 NvidiaGraphicsFixup 项目地址   https://github.com/lvs1974/NvidiaGraphicsFixup</p>
<hr>
<p>题图: http://adnmb1.com/t/6621569</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[沉沉浮浮的千木岛]]></title>
        <id>https:// fairyscript.github.io/post/沉沉浮浮的千木岛/</id>
        <link href="https:// fairyscript.github.io/post/沉沉浮浮的千木岛/">
        </link>
        <updated>2018-03-20T11:13:48.000Z</updated>
        <content type="html"><![CDATA[<p>距离上一次试图浮岛大概过去了两年，期间断断续续写过很多字。</p>
<p>然而如同往常一样，内心始终是对创作抱有抵触情绪的；又觉得矫情的无病呻吟实在是不适合放到外面引人发笑，加之腾讯云的学生政策变更导致我的学生主机莫名被取消了资格，便放弃了再自建博客的想法。</p>
<p>但在这两年，尤其是2017年，在网络上遇见了许多年轻有为的人，在深深的羡慕同时，也萌发了留下一些东西的想法。虽然这些文字只能勉强称得上是经验之谈，但是相信如果有人能因为我的经验少掉一些头发，便也是令我心满意足的生存价值。</p>
<p>我依旧是不擅长表达想法的，所以对于看完了这些无聊文字的你，请接受我对你献上的祝愿。</p>
<p>愿属于你的自由终将来临。</p>
]]></content>
    </entry>
</feed>